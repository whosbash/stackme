version: '3'

services:

  traefik:
    image: traefik:v2.11.2
    command:
      - "--api.dashboard=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=my_network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.transport.respondingTimeouts.idleTimeout=3600"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/etc/traefik/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencryptresolver.acme.email=brunolnetto@gmail..com"
      - "--certificatesresolvers.letsencryptresolver.acme.dnschallenge=true"
      - "--log.level=DEBUG"
      - "--log.format=common"
      - "--log.filePath=/var/log/traefik/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access-log"
      - "--metrics.prometheus=true" # Enable Prometheus metrics
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--tracing.jaeger=true" # Enable Jaeger tracing
      - "--tracing.jaeger.samplingType=const"
      - "--tracing.jaeger.samplingParam=1"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"

    volumes:
      - "vol_certificates:/etc/traefik/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

    networks:
      - my_network

    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8082 # Expose Prometheus metrics
        published: 8082
        mode: host

    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.rule=Host(`traefik.persev.info`)"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.dummy-svc.loadbalancer.server.port=9999"
        - "traefik.http.routers.dashboard.middlewares=myauth"
        - "traefik.http.middlewares.myauth.basicauth.users=traefik:$$2y$$05$$jY47JNA4e718TdrZxEcdB.Lri9PtE2rrZWTFxw7yX2/GFqol3QQCK"

  jaeger:
    image: jaegertracing/all-in-one:1.43
    environment:
      - JAEGER_STORAGE_TYPE=elasticsearch
      - JAEGER_ES_SERVER_URL=http://elasticsearch:9200
      - JAEGER_ES_INDEX_PREFIX=jaeger
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      retries: 3
    ports:
      - "6831:6831/udp" # Jaeger agent
      - "16686:16686"   # Jaeger UI
    networks:
      - my_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jaeger.rule=Host(`jaeger.persev.info`)"
        - "traefik.http.routers.jaeger.entrypoints=websecure"
        - "traefik.http.routers.jaeger.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - my_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.persev.info`)"
        - "traefik.http.routers.elasticsearch.entrypoints=websecure"
        - "traefik.http.routers.elasticsearch.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    ports:
      - "5601:5601"
    networks:
      - my_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.kibana.rule=Host(`kibana.persev.info`)"
        - "traefik.http.routers.kibana.entrypoints=websecure"
        - "traefik.http.routers.kibana.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    depends_on:
      - elasticsearch

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - my_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.persev.info`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - elasticsearch

  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped

    networks:
      - my_network

    ports:
      - "9100:9100"

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.node-exporter.rule=Host(`node.persev.info`)
        - traefik.http.services.node-exporter.loadbalancer.server.port=9100
        - traefik.http.routers.node-exporter.service=node-exporter
        - traefik.http.routers.node-exporter.tls.certresolver=letsencryptresolver
        - traefik.http.routers.node-exporter.entrypoints=websecure
        - traefik.http.routers.node-exporter.tls=true

  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090" # Prometheus web interface
    networks:
      - my_network

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.prometheus.rule=Host(`prometheus.persev.info`)
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.service=prometheus
        - traefik.http.routers.prometheus.tls.certresolver=letsencryptresolver
        - traefik.http.routers.prometheus.entrypoints=websecure
        - traefik.http.routers.prometheus.tls=true

volumes:
  vol_shared:
    external: true
    name: volume_swarm_shared
  vol_certificates:
    external: true
    name: volume_swarm_certificates
  esdata:
    external: true

networks:
  my_network:
    external: true
    attachable: true